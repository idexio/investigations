const fs = require('fs');
const BigNumber = require('bignumber.js');
BigNumber.config({ DECIMAL_PLACES: 40 });

module.exports = {
  assignMissingQuoteToWallets: function assignMissingQuoteToWallets(
    walletLpTokenBalances, 
    quoteMissingByWalletAndMarket, 
    removalWalletId, 
    marketId, 
    totalPoolTokens, 
    quoteDifference
  ){
    for (const walletId in walletLpTokenBalances) {
      for (const id in walletLpTokenBalances[walletId]) {
        if (parseInt(id) === parseInt(marketId)) {
          const lpTokenBalance = walletLpTokenBalances[walletId][marketId];
          quoteMissingByWalletAndMarket[walletId] = quoteMissingByWalletAndMarket[walletId] || {};
          quoteMissingByWalletAndMarket[walletId][marketId] = quoteMissingByWalletAndMarket[walletId][marketId] || new BigNumber(0);
          if (parseInt(walletId) === parseInt(removalWalletId)) {
            quoteMissingByWalletAndMarket[walletId][marketId] = quoteMissingByWalletAndMarket[walletId][marketId].minus(quoteDifference);
          } else {
            if (lpTokenBalance.gte(0)) {
              const missingShare = lpTokenBalance.multipliedBy(quoteDifference).dividedBy(totalPoolTokens);
              quoteMissingByWalletAndMarket[walletId][marketId] = quoteMissingByWalletAndMarket[walletId][marketId].plus(missingShare);
            } else {
              throw new Error('Attempt to distribute a negative LP share');
            }
          }
        }
      }
    }
  },
  decimalToPipInteger: function(decimal) {
    const bn = new BigNumber(decimal);
    return parseInt(
      bn
        .shiftedBy(8)
        .integerValue(BigNumber.ROUND_DOWN)
        .toString(),
    );
  },
  readTsv: function readTsv(path) {
    const contents = fs.readFileSync(path, 'utf-8');
    const lines = contents.split(/\r?\n/);
    const fields = lines.shift().split("\t");
    const fieldMapping = {};
    for (const i in fields) {
      fieldMapping[fields[i].toLowerCase()] = parseInt(i);
    }
    return {
      lines,
      fields,
      fieldMapping,
    };
  },
  simpleMap: function simpleMap(lines) {
    const lookup = {};
    for (const line of lines) {
      const values = line.split("\t");
      lookup[values[0]] = values[1];
    }
    return lookup;
  },
  updateWalletLpTokenBalance(type, walletId, marketId, walletLpTokenBalances, lpTokensAddedRemoved) {
    walletLpTokenBalances[walletId] = walletLpTokenBalances[walletId] || {};
    walletLpTokenBalances[walletId][marketId] = walletLpTokenBalances[walletId][marketId] || new BigNumber(0);
    walletLpTokenBalances[walletId][marketId] = (type === 'add')
      ? walletLpTokenBalances[walletId][marketId].plus(lpTokensAddedRemoved)
      : walletLpTokenBalances[walletId][marketId].minus(lpTokensAddedRemoved);
  }
};